var godrayVShader="\n  varying vec3 vNormal;\n  varying vec3 vWorldPosition;\n\n  void main() {\n    // compute intensity,\n    vNormal = normalize( normalMatrix * normal );\n\n    vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n    vWorldPosition = worldPosition.xyz;\n\n    // set gl_Position,\n    gl_Position\t= projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  }\n",godrayFShader="\n  varying vec3 vNormal;\n  varying vec3 vWorldPosition;\n\n  uniform vec3 lightColor;\n\n  uniform vec3 spotPosition;\n\n  uniform float attenuation;\n  uniform float anglePower;\n\n  void main() {\n    float intensity;\n\n    //////////////////////////////////////////////////////////\n    // distance attenuation\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n    intensity\t= distance(vWorldPosition, spotPosition) / attenuation;\n    intensity\t= 1.0 - clamp(intensity, 0.0, 1.0);\n\n    //////////////////////////////////////////////////////////\n    // intensity on angle\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n    vec3 normal\t= vec3(vNormal.x, vNormal.y, abs(vNormal.z));\n    float angleIntensity\t= pow( dot(normal, vec3(0.0, 0.0, 1.0)), anglePower );\n    intensity\t= intensity * angleIntensity;\n    // gl_FragColor\t= vec4( lightColor, intensity );,\n\n    //////////////////////////////////////////////////////////\n    // final color\t\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n\n    // set the final color\n    gl_FragColor = vec4(lightColor, intensity);\n  }\n";export default{godrayVShader,godrayFShader};